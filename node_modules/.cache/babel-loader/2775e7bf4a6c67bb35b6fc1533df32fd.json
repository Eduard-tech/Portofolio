{"ast":null,"code":"var _jsxFileName = \"/home/lewagon/code/Eduard-tech/Portofolio/src/components/project/Project.js\";\n// import React, { useRef, useState } from \"react\";\n// // Import Swiper React components\n// import { Swiper, SwiperSlide } from \"swiper/react\";\n// // Import Swiper styles\n// import \"swiper/swiper.min.css\";\n// import \"swiper/components/effect-coverflow/effect-coverflow.min.css\";\n// import \"swiper/components/pagination/pagination.min.css\";\n// import \"./Project.css\";\n// // import Swiper core and required modules\n// import SwiperCore, { EffectCoverflow, Pagination } from \"swiper/core\";\n// // install Swiper modules\n// SwiperCore.use([EffectCoverflow, Pagination]);\nimport ReactModal from 'react-modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Project() {\n  const handleAfterOpenFunc = () => {};\n\n  const handleAfterCloseFunc = () => {};\n\n  const handleRequestCloseFunc = () => {};\n\n  return /*#__PURE__*/_jsxDEV(ReactModal, {\n    isOpen: true,\n    onAfterOpen: handleAfterOpenFunc,\n    onAfterClose: handleAfterCloseFunc,\n    onRequestClose: handleRequestCloseFunc\n    /* Function that will be run when the modal is requested\n       to be closed (either by clicking on overlay or pressing ESC).\n       Note: It is not called if isOpen is changed by other means. */\n    ,\n    closeTimeoutMS: 0\n    /* Number indicating the milliseconds to wait before closing\n       the modal. */\n    ,\n    style: {\n      overlay: {},\n      content: {}\n    }\n    /* Object indicating styles to be used for the modal.\n       It has two keys, `overlay` and `content`.\n       See the `Styles` section for more details. */\n    ,\n    contentLabel: \"Example Modal\"\n    /* String indicating how the content container should be announced\n       to screenreaders */\n    ,\n    portalClassName: \"ReactModalPortal\"\n    /* String className to be applied to the portal.\n       See the `Styles` section for more details. */\n    ,\n    overlayClassName: \"ReactModal__Overlay\"\n    /* String className to be applied to the overlay.\n       See the `Styles` section for more details. */\n    ,\n    id: \"some-id\"\n    /* String id to be applied to the content div. */\n    ,\n    className: \"ReactModal__Content\"\n    /* String className to be applied to the modal content.\n       See the `Styles` section for more details. */\n    ,\n    bodyOpenClassName: \"ReactModal__Body--open\"\n    /* String className to be applied to the document.body\n       (must be a constant string).\n       This attribute when set as `null` doesn't add any class\n       to document.body.\n       See the `Styles` section for more details. */\n    ,\n    htmlOpenClassName: \"ReactModal__Html--open\"\n    /* String className to be applied to the document.html\n       (must be a constant string).\n       This attribute is `null` by default.\n       See the `Styles` section for more details. */\n    ,\n    ariaHideApp: true\n    /* Boolean indicating if the appElement should be hidden */\n    ,\n    shouldFocusAfterRender: true\n    /* Boolean indicating if the modal should be focused after render. */\n    ,\n    shouldCloseOnOverlayClick: true\n    /* Boolean indicating if the overlay should close the modal */\n    ,\n    shouldCloseOnEsc: true\n    /* Boolean indicating if pressing the esc key should close the modal\n       Note: By disabling the esc key from closing the modal\n       you may introduce an accessibility issue. */\n    ,\n    shouldReturnFocusAfterClose: true\n    /* Boolean indicating if the modal should restore focus to the element\n       that had focus prior to its display. */\n    ,\n    role: \"dialog\"\n    /* String indicating the role of the modal, allowing the 'dialog' role\n       to be applied if desired.\n       This attribute is `dialog` by default. */\n    ,\n    preventScroll: false\n    /* Boolean indicating if the modal should use the preventScroll flag when\n       restoring focus to the element that had focus prior to its display. */\n    ,\n    parentSelector: () => document.body\n    /* Function that will be called to get the parent element\n       that the modal will be attached to. */\n    ,\n    aria: {\n      labelledby: \"heading\",\n      describedby: \"full_description\"\n    }\n    /* Additional aria attributes (optional). */\n    ,\n    data: {\n      background: \"green\"\n    }\n    /* Additional data attributes (optional). */\n    ,\n    testId: \"\"\n    /* String testId that renders a data-testid attribute in the DOM,\n      useful for testing. */\n    ,\n    overlayElement: (props, contentElement) => /*#__PURE__*/_jsxDEV(\"div\", { ...props,\n      children: contentElement\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 32\n    }, this)\n    /* Custom Overlay element. */\n    ,\n    contentElement: (props, children) => /*#__PURE__*/_jsxDEV(\"div\", { ...props,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 26\n    }, this)\n    /* Custom Content element. */\n    ,\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      onClick: handleRequestCloseFunc,\n      children: \"Modal Content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, this); //   return (\n  //     <>\n  //       <Swiper\n  //         effect={\"coverflow\"}\n  //         grabCursor={true}\n  //         centeredSlides={true}\n  //         slidesPerView={\"auto\"}\n  //         coverflowEffect={{\n  //           rotate: 50,\n  //           stretch: 0,\n  //           depth: 100,\n  //           modifier: 1,\n  //           slideShadows: true,\n  //         }}\n  //         pagination={true}\n  //         className=\"mySwiper\"\n  //       >\n  //         <SwiperSlide>\n  //           <p>Hello</p>\n  //         </SwiperSlide>\n  //         <SwiperSlide>\n  //           <img src=\"https://swiperjs.com/demos/images/nature-2.jpg\" alt=\"yes\"/>\n  //         </SwiperSlide>\n  //         <SwiperSlide>\n  //           <img src=\"https://swiperjs.com/demos/images/nature-3.jpg\" alt=\"yes\"/>\n  //         </SwiperSlide>\n  //         <SwiperSlide>\n  //           <img src=\"https://swiperjs.com/demos/images/nature-4.jpg\" alt=\"yes\"/>\n  //         </SwiperSlide>\n  //         <SwiperSlide>\n  //           <img src=\"https://swiperjs.com/demos/images/nature-5.jpg\" alt=\"yes\"/>\n  //         </SwiperSlide>\n  //         <SwiperSlide>\n  //           <img src=\"https://swiperjs.com/demos/images/nature-6.jpg\" alt=\"yes\"/>\n  //         </SwiperSlide>\n  //         <SwiperSlide>\n  //           <img src=\"https://swiperjs.com/demos/images/nature-7.jpg\" alt=\"yes\"/>\n  //         </SwiperSlide>\n  //         <SwiperSlide>\n  //           <img src=\"https://swiperjs.com/demos/images/nature-8.jpg\" alt=\"yes\"/>\n  //         </SwiperSlide>\n  //         <SwiperSlide>\n  //           <img src=\"https://swiperjs.com/demos/images/nature-9.jpg\" alt=\"yes\"/>\n  //         </SwiperSlide>\n  //       </Swiper>\n  //     </>\n  //   );\n}\n\n_c = Project;\nexport default Project;\n\nvar _c;\n\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"sources":["/home/lewagon/code/Eduard-tech/Portofolio/src/components/project/Project.js"],"names":["ReactModal","Project","handleAfterOpenFunc","handleAfterCloseFunc","handleRequestCloseFunc","overlay","content","document","body","labelledby","describedby","background","props","contentElement","children"],"mappings":";AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA,OAAOA,UAAP,MAAuB,aAAvB;;;AAGA,SAASC,OAAT,GAAmB;AAEjB,QAAMC,mBAAmB,GAAG,MAAM,CAAE,CAApC;;AACA,QAAMC,oBAAoB,GAAG,MAAM,CAAE,CAArC;;AACA,QAAMC,sBAAsB,GAAG,MAAM,CAAE,CAAvC;;AAEA,sBAAO,QAAC,UAAD;AAEP,IAAA,MAAM,EAAE,IAFD;AAIP,IAAA,WAAW,EAAEF,mBAJN;AAMP,IAAA,YAAY,EAAGC,oBANR;AAQP,IAAA,cAAc,EACZC;AACF;AACF;AACA;AAZS;AAcP,IAAA,cAAc,EACZ;AACF;AACF;AAjBS;AAmBP,IAAA,KAAK,EACH;AAAEC,MAAAA,OAAO,EAAE,EAAX;AAAeC,MAAAA,OAAO,EAAE;AAAxB;AACF;AACF;AACA;AAvBS;AAyBP,IAAA,YAAY,EACV;AACF;AACF;AA5BS;AA8BP,IAAA,eAAe,EACb;AACF;AACF;AAjCS;AAmCP,IAAA,gBAAgB,EACd;AACF;AACF;AAtCS;AAwCP,IAAA,EAAE,EACA;AACF;AA1CO;AA4CP,IAAA,SAAS,EACP;AACF;AACF;AA/CS;AAiDP,IAAA,iBAAiB,EACf;AACF;AACF;AACA;AACA;AACA;AAvDS;AAyDP,IAAA,iBAAiB,EACf;AACF;AACF;AACA;AACA;AA9DS;AAgEP,IAAA,WAAW,EACT;AACF;AAlEO;AAoEP,IAAA,sBAAsB,EACpB;AACF;AAtEO;AAwEP,IAAA,yBAAyB,EACvB;AACF;AA1EO;AA4EP,IAAA,gBAAgB,EACd;AACF;AACF;AACA;AAhFS;AAkFP,IAAA,2BAA2B,EACzB;AACF;AACF;AArFS;AAuFP,IAAA,IAAI,EACF;AACF;AACF;AACA;AA3FS;AA6FP,IAAA,aAAa,EACX;AACF;AACF;AAhGS;AAkGP,IAAA,cAAc,EACZ,MAAMC,QAAQ,CAACC;AACjB;AACF;AArGS;AAuGP,IAAA,IAAI,EACF;AACEC,MAAAA,UAAU,EAAE,SADd;AAEEC,MAAAA,WAAW,EAAE;AAFf;AAIF;AA5GO;AA8GP,IAAA,IAAI,EACF;AAAEC,MAAAA,UAAU,EAAE;AAAd;AACF;AAhHO;AAkHP,IAAA,MAAM,EACJ;AACF;AACF;AArHS;AAwHP,IAAA,cAAc,EACZ,CAACC,KAAD,EAAQC,cAAR,kBAA2B,oBAASD,KAAT;AAAA,gBAAiBC;AAAjB;AAAA;AAAA;AAAA;AAAA;AAC7B;AA1HO;AA4HP,IAAA,cAAc,EACZ,CAACD,KAAD,EAAQE,QAAR,kBAAqB,oBAASF,KAAT;AAAA,gBAAiBE;AAAjB;AAAA;AAAA;AAAA;AAAA;AACvB;AA9HO;AAAA,2BAgIL;AAAG,MAAA,OAAO,EAAEV,sBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhIK;AAAA;AAAA;AAAA;AAAA,UAAP,CANiB,CA4InB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;;KA3LQH,O;AA6LT,eAAeA,OAAf","sourcesContent":["// import React, { useRef, useState } from \"react\";\n// // Import Swiper React components\n// import { Swiper, SwiperSlide } from \"swiper/react\";\n\n// // Import Swiper styles\n// import \"swiper/swiper.min.css\";\n// import \"swiper/components/effect-coverflow/effect-coverflow.min.css\";\n// import \"swiper/components/pagination/pagination.min.css\";\n\n// import \"./Project.css\";\n\n// // import Swiper core and required modules\n// import SwiperCore, { EffectCoverflow, Pagination } from \"swiper/core\";\n\n// // install Swiper modules\n// SwiperCore.use([EffectCoverflow, Pagination]);\n\nimport ReactModal from 'react-modal';\n\n\nfunction Project() {\n\n  const handleAfterOpenFunc = () => {};\n  const handleAfterCloseFunc = () => {};\n  const handleRequestCloseFunc = () => {};\n\n  return <ReactModal\n\n  isOpen={true}\n\n  onAfterOpen={handleAfterOpenFunc}\n\n  onAfterClose={ handleAfterCloseFunc}\n\n  onRequestClose={\n    handleRequestCloseFunc\n  /* Function that will be run when the modal is requested\n     to be closed (either by clicking on overlay or pressing ESC).\n     Note: It is not called if isOpen is changed by other means. */}\n\n  closeTimeoutMS={\n    0\n  /* Number indicating the milliseconds to wait before closing\n     the modal. */}\n\n  style={\n    { overlay: {}, content: {} }\n  /* Object indicating styles to be used for the modal.\n     It has two keys, `overlay` and `content`.\n     See the `Styles` section for more details. */}\n\n  contentLabel={\n    \"Example Modal\"\n  /* String indicating how the content container should be announced\n     to screenreaders */}\n\n  portalClassName={\n    \"ReactModalPortal\"\n  /* String className to be applied to the portal.\n     See the `Styles` section for more details. */}\n\n  overlayClassName={\n    \"ReactModal__Overlay\"\n  /* String className to be applied to the overlay.\n     See the `Styles` section for more details. */}\n\n  id={\n    \"some-id\"\n  /* String id to be applied to the content div. */}\n\n  className={\n    \"ReactModal__Content\"\n  /* String className to be applied to the modal content.\n     See the `Styles` section for more details. */}\n\n  bodyOpenClassName={\n    \"ReactModal__Body--open\"\n  /* String className to be applied to the document.body\n     (must be a constant string).\n     This attribute when set as `null` doesn't add any class\n     to document.body.\n     See the `Styles` section for more details. */}\n\n  htmlOpenClassName={\n    \"ReactModal__Html--open\"\n  /* String className to be applied to the document.html\n     (must be a constant string).\n     This attribute is `null` by default.\n     See the `Styles` section for more details. */}\n\n  ariaHideApp={\n    true\n  /* Boolean indicating if the appElement should be hidden */}\n\n  shouldFocusAfterRender={\n    true\n  /* Boolean indicating if the modal should be focused after render. */}\n\n  shouldCloseOnOverlayClick={\n    true\n  /* Boolean indicating if the overlay should close the modal */}\n\n  shouldCloseOnEsc={\n    true\n  /* Boolean indicating if pressing the esc key should close the modal\n     Note: By disabling the esc key from closing the modal\n     you may introduce an accessibility issue. */}\n\n  shouldReturnFocusAfterClose={\n    true\n  /* Boolean indicating if the modal should restore focus to the element\n     that had focus prior to its display. */}\n\n  role={\n    \"dialog\"\n  /* String indicating the role of the modal, allowing the 'dialog' role\n     to be applied if desired.\n     This attribute is `dialog` by default. */}\n\n  preventScroll={\n    false\n  /* Boolean indicating if the modal should use the preventScroll flag when\n     restoring focus to the element that had focus prior to its display. */}\n\n  parentSelector={\n    () => document.body\n  /* Function that will be called to get the parent element\n     that the modal will be attached to. */}\n\n  aria={\n    {\n      labelledby: \"heading\",\n      describedby: \"full_description\"\n    }\n  /* Additional aria attributes (optional). */}\n\n  data={\n    { background: \"green\" }\n  /* Additional data attributes (optional). */}\n\n  testId={\n    \"\"\n  /* String testId that renders a data-testid attribute in the DOM,\n    useful for testing. */}\n\n\n  overlayElement={\n    (props, contentElement) => <div {...props}>{contentElement}</div>\n  /* Custom Overlay element. */}\n\n  contentElement={\n    (props, children) => <div {...props}>{children}</div>\n  /* Custom Content element. */}\n  >\n    <p onClick={handleRequestCloseFunc}>Modal Content</p>\n</ReactModal>\n\n\n\n\n//   return (\n//     <>\n//       <Swiper\n//         effect={\"coverflow\"}\n//         grabCursor={true}\n//         centeredSlides={true}\n//         slidesPerView={\"auto\"}\n//         coverflowEffect={{\n//           rotate: 50,\n//           stretch: 0,\n//           depth: 100,\n//           modifier: 1,\n//           slideShadows: true,\n//         }}\n//         pagination={true}\n//         className=\"mySwiper\"\n//       >\n//         <SwiperSlide>\n//           <p>Hello</p>\n//         </SwiperSlide>\n//         <SwiperSlide>\n//           <img src=\"https://swiperjs.com/demos/images/nature-2.jpg\" alt=\"yes\"/>\n//         </SwiperSlide>\n//         <SwiperSlide>\n//           <img src=\"https://swiperjs.com/demos/images/nature-3.jpg\" alt=\"yes\"/>\n//         </SwiperSlide>\n//         <SwiperSlide>\n//           <img src=\"https://swiperjs.com/demos/images/nature-4.jpg\" alt=\"yes\"/>\n//         </SwiperSlide>\n//         <SwiperSlide>\n//           <img src=\"https://swiperjs.com/demos/images/nature-5.jpg\" alt=\"yes\"/>\n//         </SwiperSlide>\n//         <SwiperSlide>\n//           <img src=\"https://swiperjs.com/demos/images/nature-6.jpg\" alt=\"yes\"/>\n//         </SwiperSlide>\n//         <SwiperSlide>\n//           <img src=\"https://swiperjs.com/demos/images/nature-7.jpg\" alt=\"yes\"/>\n//         </SwiperSlide>\n//         <SwiperSlide>\n//           <img src=\"https://swiperjs.com/demos/images/nature-8.jpg\" alt=\"yes\"/>\n//         </SwiperSlide>\n//         <SwiperSlide>\n//           <img src=\"https://swiperjs.com/demos/images/nature-9.jpg\" alt=\"yes\"/>\n//         </SwiperSlide>\n//       </Swiper>\n//     </>\n//   );\n}\n\nexport default Project;"]},"metadata":{},"sourceType":"module"}